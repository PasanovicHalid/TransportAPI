// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TransportDbContext))]
    [Migration("20230809202347_Expansions_of_transportation")]
    partial class Expansions_of_transportation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Cost", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("FromId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("ToId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IdentityId");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("Role").HasValue("Employee");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Stop", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("TransportationId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("TransportationId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("Domain.Entities.Trailer", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("VehicleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("Domain.Entities.Transportation", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("DriverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("RequiredFor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"));

                    b.Property<decimal>("CompanyId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("DateOfManufacturing")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DriverId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Vehicle");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Admininistrator", b =>
                {
                    b.HasBaseType("Domain.Entities.Employee");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Entities.Driver", b =>
                {
                    b.HasBaseType("Domain.Entities.Employee");

                    b.Property<decimal?>("VehicleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasIndex("VehicleId");

                    b.HasDiscriminator().HasValue("Driver");
                });

            modelBuilder.Entity("Domain.Entities.Truck", b =>
                {
                    b.HasBaseType("Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("Truck");
                });

            modelBuilder.Entity("Domain.Entities.Van", b =>
                {
                    b.HasBaseType("Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("Van");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<decimal>("CompanyId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Companies");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");

                            b1.OwnsOne("Domain.ValueObjects.GpsCoordinate", "GpsCoordinate", b2 =>
                                {
                                    b2.Property<decimal>("AddressCompanyId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("AddressCompanyId");

                                    b2.ToTable("Companies");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressCompanyId");
                                });

                            b1.Navigation("GpsCoordinate");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cost", b =>
                {
                    b.HasOne("Domain.Entities.Stop", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Domain.Entities.Stop", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.OwnsOne("Domain.ValueObjects.Money", "Expendature", b1 =>
                        {
                            b1.Property<decimal>("CostId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("Amount")
                                .HasColumnType("float");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("CostId");

                            b1.ToTable("Costs");

                            b1.WithOwner()
                                .HasForeignKey("CostId");
                        });

                    b.Navigation("Expendature")
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<decimal>("EmployeeId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("Employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");

                            b1.OwnsOne("Domain.ValueObjects.GpsCoordinate", "GpsCoordinate", b2 =>
                                {
                                    b2.Property<decimal>("AddressEmployeeId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("AddressEmployeeId");

                                    b2.ToTable("Employees");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressEmployeeId");
                                });

                            b1.Navigation("GpsCoordinate");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Stop", b =>
                {
                    b.HasOne("Domain.Entities.Transportation", "For")
                        .WithMany()
                        .HasForeignKey("TransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Address", "Destination", b1 =>
                        {
                            b1.Property<decimal>("StopId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("StopId");

                            b1.ToTable("Stops");

                            b1.WithOwner()
                                .HasForeignKey("StopId");

                            b1.OwnsOne("Domain.ValueObjects.GpsCoordinate", "GpsCoordinate", b2 =>
                                {
                                    b2.Property<decimal>("AddressStopId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("AddressStopId");

                                    b2.ToTable("Stops");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressStopId");
                                });

                            b1.Navigation("GpsCoordinate");
                        });

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("For");
                });

            modelBuilder.Entity("Domain.Entities.Trailer", b =>
                {
                    b.HasOne("Domain.Entities.Company", "OwnedBy")
                        .WithMany("Trailers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "UsedBy")
                        .WithMany("Trailers")
                        .HasForeignKey("VehicleId");

                    b.OwnsOne("Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<decimal>("TrailerId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("MaxCarryWeight")
                                .HasColumnType("float");

                            b1.HasKey("TrailerId");

                            b1.ToTable("Trailers");

                            b1.WithOwner()
                                .HasForeignKey("TrailerId");

                            b1.OwnsOne("Domain.ValueObjects.Volume", "Volume", b2 =>
                                {
                                    b2.Property<decimal>("CapacityTrailerId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Depth")
                                        .HasColumnType("float");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("CapacityTrailerId");

                                    b2.ToTable("Trailers");

                                    b2.WithOwner()
                                        .HasForeignKey("CapacityTrailerId");
                                });

                            b1.Navigation("Volume")
                                .IsRequired();
                        });

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("OwnedBy");

                    b.Navigation("UsedBy");
                });

            modelBuilder.Entity("Domain.Entities.Transportation", b =>
                {
                    b.HasOne("Domain.Entities.Company", "DesignatedTo")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Driver", "DrivenBy")
                        .WithMany("AssignedTransportations")
                        .HasForeignKey("DriverId");

                    b.OwnsOne("Domain.ValueObjects.Money", "Cost", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("Amount")
                                .HasColumnType("float");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Address", "Destination", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");

                            b1.OwnsOne("Domain.ValueObjects.GpsCoordinate", "GpsCoordinate", b2 =>
                                {
                                    b2.Property<decimal>("AddressTransportationId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("AddressTransportationId");

                                    b2.ToTable("Transportations");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressTransportationId");
                                });

                            b1.Navigation("GpsCoordinate");
                        });

                    b.OwnsOne("Domain.ValueObjects.Address", "Origin", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");

                            b1.OwnsOne("Domain.ValueObjects.GpsCoordinate", "GpsCoordinate", b2 =>
                                {
                                    b2.Property<decimal>("AddressTransportationId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Latitude")
                                        .HasColumnType("float");

                                    b2.Property<double>("Longitude")
                                        .HasColumnType("float");

                                    b2.HasKey("AddressTransportationId");

                                    b2.ToTable("Transportations");

                                    b2.WithOwner()
                                        .HasForeignKey("AddressTransportationId");
                                });

                            b1.Navigation("GpsCoordinate");
                        });

                    b.OwnsOne("Domain.ValueObjects.Money", "Received", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("Amount")
                                .HasColumnType("float");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");
                        });

                    b.OwnsOne("Domain.ValueObjects.GpsCoordinate", "StartLocation", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Cargo", "Transporting", b1 =>
                        {
                            b1.Property<decimal>("TransportationId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Weight")
                                .HasColumnType("float");

                            b1.HasKey("TransportationId");

                            b1.ToTable("Transportations");

                            b1.WithOwner()
                                .HasForeignKey("TransportationId");

                            b1.OwnsOne("Domain.ValueObjects.Volume", "Volume", b2 =>
                                {
                                    b2.Property<decimal>("CargoTransportationId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Depth")
                                        .HasColumnType("float");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.HasKey("CargoTransportationId");

                                    b2.ToTable("Transportations");

                                    b2.WithOwner()
                                        .HasForeignKey("CargoTransportationId");
                                });

                            b1.Navigation("Volume")
                                .IsRequired();
                        });

                    b.Navigation("Cost");

                    b.Navigation("DesignatedTo");

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("DrivenBy");

                    b.Navigation("Origin")
                        .IsRequired();

                    b.Navigation("Received")
                        .IsRequired();

                    b.Navigation("StartLocation");

                    b.Navigation("Transporting")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.Company", "OwnedBy")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Employee", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.OwnsOne("Domain.ValueObjects.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<decimal>("VehicleId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("Depth")
                                .HasColumnType("float");

                            b1.Property<double>("Width")
                                .HasColumnType("float");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("Dimensions")
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Driver", b =>
                {
                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.OwnsMany("Domain.Entities.DriversLicense", "DriversLicenses", b1 =>
                        {
                            b1.Property<decimal>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(20,0)");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<decimal>("Id"));

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<decimal>("DriverId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("IssuedOn")
                                .HasColumnType("datetime2");

                            b1.Property<byte[]>("Version")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion");

                            b1.HasKey("Id");

                            b1.HasIndex("DriverId");

                            b1.ToTable("DriversLicense");

                            b1.WithOwner("Driver")
                                .HasForeignKey("DriverId");

                            b1.Navigation("Driver");
                        });

                    b.Navigation("DriversLicenses");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.Van", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<decimal>("VanId")
                                .HasColumnType("decimal(20,0)");

                            b1.Property<double>("MaxCarryWeight")
                                .HasColumnType("float");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_Version")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("rowversion")
                                .HasColumnName("Version");

                            b1.HasKey("VanId");

                            b1.ToTable("Vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VanId");

                            b1.OwnsOne("Domain.ValueObjects.Volume", "Volume", b2 =>
                                {
                                    b2.Property<decimal>("CapacityVanId")
                                        .HasColumnType("decimal(20,0)");

                                    b2.Property<double>("Depth")
                                        .HasColumnType("float");

                                    b2.Property<double>("Height")
                                        .HasColumnType("float");

                                    b2.Property<double>("Width")
                                        .HasColumnType("float");

                                    b2.Property<byte[]>("_TableSharingConcurrencyTokenConvention_Version")
                                        .IsConcurrencyToken()
                                        .IsRequired()
                                        .ValueGeneratedOnAddOrUpdate()
                                        .HasColumnType("rowversion")
                                        .HasColumnName("Version");

                                    b2.HasKey("CapacityVanId");

                                    b2.ToTable("Vehicles");

                                    b2.WithOwner()
                                        .HasForeignKey("CapacityVanId");
                                });

                            b1.Navigation("Volume")
                                .IsRequired();
                        });

                    b.Navigation("Capacity")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Trailers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("Trailers");
                });

            modelBuilder.Entity("Domain.Entities.Driver", b =>
                {
                    b.Navigation("AssignedTransportations");
                });
#pragma warning restore 612, 618
        }
    }
}
